{
  "nodes": [
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:0",
      "labels": [
        "SpaceComplexity"
      ],
      "properties": {
        "complexity": "$O(1)$",
        "explanation": "The time complexity is $O(n)$, where 'n' is the total number of items in the list. This is because we need to iterate through each item once to check if it matches the rule. The space complexity is $O(1)$ as we only use a few variables to store the count and index, which does not scale with the size of the input."
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Array",
          "Simulation"
        ],
        "title": "Create Target Array in the Given Order",
        "problem_statement": "Given two arrays of integers nums and index. Your task is to create target array under the following rules:\n- Initially target array is empty.\n- From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.\n- Repeat the previous step until there are no elements to read in nums and index.\nReturn the target array.\nIt is guaranteed that the insertion operations will be valid.",
        "constraints": [
          "1 \u003C= nums.length, index.length \u003C= 100",
          "nums.length == index.length",
          "0 \u003C= nums[i] \u003C= 100",
          "0 \u003C= index[i] \u003C= i"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'nums = [0,1,2,3,4], index = [0,1,2,2,1]', 'output': '[0,4,1,3,2]', 'explanation': 'nums       index     target\\n0            0        [0]\\n1            1        [0,1]\\n2            2        [0,1,2]\\n3            2        [0,1,3,2]\\n4            1        [0,4,1,3,2]'}",
          "{'id': 2, 'input': 'nums = [1,2,3,4,0], index = [0,1,2,3,0]', 'output': '[0,1,2,3,4]', 'explanation': 'nums       index     target\\n1            0        [1]\\n2            1        [1,2]\\n3            2        [1,2,3]\\n4            3        [1,2,3,4]\\n0            0        [0,1,2,3,4]'}",
          "{'id': 3, 'input': 'nums = [1], index = [0]', 'output': '[1]', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:2",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Simulation"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:3",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Standard",
        "code": "class Solution {\npublic:\n    vector\u003Cint\u003E createTargetArray(vector\u003Cint\u003E& v1, vector\u003Cint\u003E& v2) {\n        int n = v2.size();\n        vector\u003Cint\u003E r;\n        for(int i = 0; i \u003C n; i++)\n        {\n            r.insert(r.begin() + v2[i], v1[i]);\n        }\n        return r;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:4",
      "labels": [
        "TimeComplexity"
      ],
      "properties": {
        "complexity": "$O(n^2)$",
        "explanation": "The time complexity is $O(n^2)$ because the `insert` operation on a vector can take linear time. In the worst case, inserting an element at the beginning of the vector requires shifting all existing elements, which takes $O(k)$ time for a vector of size $k$. Since this is done inside a loop that runs $n$ times, the total time complexity is the sum of $1 + 2 + ... + n$, which is $O(n^2)$. The space complexity is $O(n)$ to store the target array which will have $n$ elements."
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:5",
      "labels": [
        "SpaceComplexity"
      ],
      "properties": {
        "complexity": "$O(n)$",
        "explanation": "The time complexity is $O(n^2)$ because the `insert` operation on a vector can take linear time. In the worst case, inserting an element at the beginning of the vector requires shifting all existing elements, which takes $O(k)$ time for a vector of size $k$. Since this is done inside a loop that runs $n$ times, the total time complexity is the sum of $1 + 2 + ... + n$, which is $O(n^2)$. The space complexity is $O(n)$ to store the target array which will have $n$ elements."
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Bit Manipulation",
          "Array",
          "Math"
        ],
        "title": "XOR Operation in an Array",
        "problem_statement": "You are given an integer n and an integer start.\n\nDefine an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.\n\nReturn the bitwise XOR of all elements of nums.",
        "constraints": [
          "1 \u003C= n \u003C= 1000",
          "0 \u003C= start \u003C= 1000",
          "n == nums.length"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'n = 5, start = 0', 'output': '8', 'explanation': 'Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\\nWhere \"^\" corresponds to bitwise XOR operator.'}",
          "{'id': 2, 'input': 'n = 4, start = 3', 'output': '8', 'explanation': 'Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:7",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Bit Manipulation"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:8",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Math"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:9",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Standard",
        "code": "class Solution {\npublic:\n    int xorOperation(int n, int start) {\n        int x = start;\n        for(int i = 1; i \u003C n; i++)\n        {\n            x = x ^ (start + 2*i);\n        }\n        return x;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:10",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Standard",
        "code": "class Solution:\n    def xorOperation(self, n: int, start: int) -\u003E int:\n        x = start\n        for i in range(1, n):\n            x = x ^ (start + 2*i)\n        return x",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:11",
      "labels": [
        "TimeComplexity"
      ],
      "properties": {
        "complexity": "$O(n)$",
        "explanation": "The time complexity is $O(n)$ because the solution involves a single loop that iterates from 1 to n-1. The operations inside the loop are constant time. The space complexity is $O(1)$ because the algorithm only uses a few variables to store the result and the loop counter, without creating the full array in memory. The space used is constant regardless of the input size 'n'."
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:12",
      "labels": [
        "SpaceComplexity"
      ],
      "properties": {
        "complexity": "$O(1)$",
        "explanation": "The time complexity is $O(n)$ because the solution involves a single loop that iterates from 1 to n-1. The operations inside the loop are constant time. The space complexity is $O(1)$ because the algorithm only uses a few variables to store the result and the loop counter, without creating the full array in memory. The space used is constant regardless of the input size 'n'."
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Dynamic Programming",
          "Math",
          "Memoization"
        ],
        "title": "Climbing Stairs",
        "problem_statement": "You are climbing a staircase. It takes n steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "constraints": [
          "1 \u003C= n \u003C= 45"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'n = 2', 'output': '2', 'explanation': 'There are two ways to climb to the top.\\n1. 1 step + 1 step\\n2. 2 steps'}",
          "{'id': 2, 'input': 'n = 3', 'output': '3', 'explanation': 'There are three ways to climb to the top.\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:14",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Dynamic Programming"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:15",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Memoization"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:16",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (Tabulation)",
        "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n \u003C= 1) return 1;\n        int a[n+1];\n        a[0] = 1, a[1] = 1;\n        for(int i = 2; i \u003C= n; i++){\n            a[i] = a[i-2] + a[i-1];\n        }\n        return a[n];\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:17",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (Tabulation)",
        "code": "class Solution:\n    def climbStairs(self, n: int) -\u003E int:\n        if n \u003C= 1: return 1\n        arr = [1, 1]\n        for i in range(2, n+1):\n            arr.append(arr[i-2] + arr[i-1])\n        return arr[n]",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:18",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (Space Optimized)",
        "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n        if(n \u003C= 2) return n;\n        int a = 1, b = 2, ans;\n        for(int i = 3; i \u003C= n; i++){\n            ans = a + b;\n            a = b;\n            b = ans;\n        }\n        return ans;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:19",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (Space Optimized)",
        "code": "class Solution:\n    def climbStairs(self, n: int) -\u003E int:\n        if(n \u003C= 2): return n\n        a, b, ans = 1, 2, 0\n        for i in range(3, n+1):\n            ans = a + b\n            a = b\n            b = ans\n        return ans",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Dynamic Programming",
          "Bit Manipulation"
        ],
        "title": "Counting Bits",
        "problem_statement": "Given an integer n, return an array ans of length n + 1 such that for each i (0 \u003C= i \u003C= n), ans[i] is the number of 1's in the binary representation of i.",
        "constraints": [
          "0 \u003C= n \u003C= 10^5"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'n = 2', 'output': '[0,1,1]', 'explanation': '0 --\u003E 0\\n1 --\u003E 1\\n2 --\u003E 10'}",
          "{'id': 2, 'input': 'n = 5', 'output': '[0,1,1,2,1,2]', 'explanation': '0 --\u003E 0\\n1 --\u003E 1\\n2 --\u003E 10\\n3 --\u003E 11\\n4 --\u003E 100\\n5 --\u003E 101'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:21",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming with Bit Manipulation",
        "code": "class Solution {\npublic:\n    vector\u003Cint\u003E countBits(int n) {\n        vector\u003Cint\u003E dp(n+1);\n        dp[0] = 0;\n        for(int i = 1; i \u003C n+1; i++)\n        {\n            dp[i] = dp[i/2] + i%2;\n        }\n        return dp;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:22",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming with Bit Manipulation",
        "code": "class Solution:\n    def countBits(self, n: int) -\u003E List[int]:\n        dp = [0] * (n + 1)\n        for i in range(1, n+1):\n            # The Python solution provided can be simplified to the same logic as the C++ one\n            # dp[i] = dp[i \u003E\u003E 1] + (i & 1)\n            # Original provided logic:\n            if i%2 == 1:\n                dp[i] = dp[i-1] + 1\n            else:\n                dp[i] = dp[i//2]\n        return dp",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Dynamic Programming",
          "Array"
        ],
        "title": "Min Cost Climbing Stairs",
        "problem_statement": "You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\nYou can either start from the step with index 0, or the step with index 1.\n\nReturn the minimum cost to reach the top of the floor.",
        "constraints": [
          "2 \u003C= cost.length \u003C= 1000",
          "0 \u003C= cost[i] \u003C= 999"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'cost = [10,15,20]', 'output': '15', 'explanation': 'You will start at index 1.\\n- Pay 15 and climb two steps to reach the top.\\nThe total cost is 15.'}",
          "{'id': 2, 'input': 'cost = [1,100,1,1,1,100,1,1,100,1]', 'output': '6', 'explanation': 'You will start at index 0.\\n- Pay 1 and climb two steps to reach index 2.\\n- Pay 1 and climb two steps to reach index 4.\\n- Pay 1 and climb two steps to reach index 6.\\n- Pay 1 and climb one step to reach index 7.\\n- Pay 1 and climb two steps to reach index 9.\\n- Pay 1 and climb one step to reach the top.\\nThe total cost is 6.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:24",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (Space-Optimized)",
        "code": "class Solution {\npublic:\n    int minCostClimbingStairs(vector\u003Cint\u003E& cost) {\n        int dp = 0, dp1 = 0, dp2 = 0;\n        for(int i = 2; i \u003C= cost.size(); i++){\n            int one = dp1 + cost[i-1];\n            int two = dp2 + cost[i-2];\n            dp = min(one, two);\n            dp2 = dp1;\n            dp1 = dp;\n        }\n        return dp1;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:25",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (Space-Optimized)",
        "code": "class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -\u003E int:\n        dp, dp1, dp2 = 0, 0, 0\n        for i in range(2, len(cost)+1):\n            one = dp1 + cost[i-1]\n            two = dp2 + cost[i-2]\n            dp = min(one, two)\n            dp2 = dp1\n            dp1 = dp\n        return dp1",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:26",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (In-place)",
        "code": "class Solution {\npublic:\n    int minCostClimbingStairs(vector\u003Cint\u003E& cost) {\n        int n = cost.size();\n        for(int i = 2; i \u003C n; i++){\n            cost[i] += min(cost[i-1], cost[i-2]);\n        }\n        return min(cost[n-1], cost[n-2]);\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:27",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (In-place)",
        "code": "class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -\u003E int:\n        for i in range(2, len(cost)):\n            cost[i] += min(cost[i-1], cost[i-2])\n        return min(cost[-1], cost[-2])",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Array",
          "Dynamic Programming"
        ],
        "title": "Pascal's Triangle II",
        "problem_statement": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.",
        "constraints": [
          "0 \u003C= rowIndex \u003C= 33"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'rowIndex = 3', 'output': '[1,3,3,1]'}",
          "{'id': 2, 'input': 'rowIndex = 0', 'output': '[1]'}",
          "{'id': 3, 'input': 'rowIndex = 1', 'output': '[1,1]'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:29",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (In-place Row Calculation)",
        "code": "class Solution {\npublic:\n    vector\u003Cint\u003E getRow(int rowIndex) {\n        vector\u003Cint\u003E ans(rowIndex+1, 0);\n        ans[0] = 1;\n        for(int i = 1; i \u003C rowIndex+1; i++)\n            for(int j = i; j \u003E= 1; j--)\n                ans[j] += ans[j-1];\n        return ans;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:30",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming (In-place Row Calculation)",
        "code": "class Solution:\n    def getRow(self, rowIndex: int) -\u003E List[int]:\n        ans = [1]*(rowIndex + 1)\n        for i in range(2, rowIndex+1):\n            for j in range(i-1, 0, -1):\n                ans[j] += ans[j-1]\n        return ans",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Graph",
          "Breadth-First Search",
          "Depth-First Search",
          "Union-Find"
        ],
        "title": "Find if Path Exists in Graph",
        "problem_statement": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\n\nYou want to determine if there is a valid path that exists from vertex source to vertex destination.\n\nGiven edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.",
        "constraints": [
          "1 \u003C= n \u003C= 2 * 10^5",
          "0 \u003C= edges.length \u003C= 2 * 10^5",
          "edges[i].length == 2",
          "0 \u003C= ui, vi \u003C= n - 1",
          "ui != vi",
          "0 \u003C= source, destination \u003C= n - 1",
          "There are no duplicate edges.",
          "There are no self edges."
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2', 'output': 'true', 'explanation': 'There are two paths from vertex 0 to vertex 2:\\n- 0 → 1 → 2\\n- 0 → 2'}",
          "{'id': 2, 'input': 'n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5', 'output': 'false', 'explanation': 'There is no path from vertex 0 to vertex 5.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:32",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Graph"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:33",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Breadth-First Search"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:34",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Depth-First Search"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:35",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Union-Find"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:36",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Breadth-First Search (BFS)",
        "code": "class Solution {\npublic:\n    bool validPath(int n, vector\u003Cvector\u003Cint\u003E\u003E& edges, int source, int destination){\n        vector\u003Cvector\u003Cint\u003E\u003E graph(n);\n        for(int i = 0; i \u003C edges.size(); i++){\n            graph[edges[i][0]].push_back(edges[i][1]);\n            graph[edges[i][1]].push_back(edges[i][0]);\n        }\n        queue\u003Cint\u003E q;\n        vector\u003Cint\u003E visited(n, 0);\n        q.push(source);\n        visited[source] = 1;\n        while(!q.empty()){\n            int top = q.front();\n            q.pop();\n            if(top == destination)\n                return true;\n            for(int i=0; i\u003Cgraph[top].size(); i++){\n                if(visited[graph[top][i]] == 0){\n                    q.push(graph[top][i]);\n                    visited[graph[top][i]] = 1;\n                }\n            }\n        }\n        return false;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Linked List",
          "Bit Manipulation",
          "Math"
        ],
        "title": "Convert Binary Number in a Linked List to Integer",
        "problem_statement": "Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.\n\nReturn the decimal value of the number in the linked list.\n\nThe most significant bit is at the head of the linked list.",
        "constraints": [
          "The Linked List is not empty.",
          "Number of nodes will not exceed 30.",
          "Each node's value is either 0 or 1."
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'head = [1,0,1]', 'output': '5', 'explanation': '(101) in base 2 = (5) in base 10'}",
          "{'id': 2, 'input': 'head = [0]', 'output': '0', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:38",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Linked List"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:39",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Iterative Bitwise Left Shift",
        "code": "class Solution {\npublic:\n    int getDecimalValue(ListNode* head) {\n        int ans = 0;\n        while(head)\n        {\n            ans = (ans \u003C\u003C 1) + head -\u003E val;\n            head = head -\u003E next;\n        }\n        return ans;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Linked List"
        ],
        "title": "Delete Node in a Linked List",
        "problem_statement": "There is a singly-linked list head and we want to delete a node node in it.\n\nYou are given the node to be deleted node. You will not be given access to the first node of head.\n\nAll the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\n\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n- The value of the given node should not exist in the linked list.\n- The number of nodes in the linked list should decrease by one.\n- All the values before node should be in the same order.\n- All the values after node should be in the same order.",
        "constraints": [
          "The number of the nodes in the given list is in the range [2, 1000].",
          "-1000 \u003C= Node.val \u003C= 1000",
          "The value of each node in the list is unique.",
          "The node to be deleted is in the list and is not a tail node."
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'head = [4,5,1,9], node = 5', 'output': '[4,1,9]', 'explanation': 'You are given the second node with value 5, the linked list should become 4 -\u003E 1 -\u003E 9 after calling your function.'}",
          "{'id': 2, 'input': 'head = [4,5,1,9], node = 1', 'output': '[4,5,9]', 'explanation': 'You are given the third node with value 1, the linked list should become 4 -\u003E 5 -\u003E 9 after calling your function.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:41",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Copy Next Node's Value",
        "code": "class Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        ListNode* temp = node -\u003E next;\n        node -\u003E val = temp -\u003E val;\n        node -\u003E next = temp -\u003E next;\n        delete temp;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Linked List",
          "Two Pointers",
          "Hash Table"
        ],
        "title": "Linked List Cycle",
        "problem_statement": "Given head, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n\nReturn true if there is a cycle in the linked list. Otherwise, return false.",
        "constraints": [
          "The number of the nodes in the list is in the range [0, 10^4].",
          "-10^5 \u003C= Node.val \u003C= 10^5",
          "pos is -1 or a valid index in the linked-list."
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'head = [3,2,0,-4], pos = 1', 'output': 'true', 'explanation': 'There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).'}",
          "{'id': 2, 'input': 'head = [1,2], pos = 0', 'output': 'true', 'explanation': 'There is a cycle in the linked list, where the tail connects to the 0th node.'}",
          "{'id': 3, 'input': 'head = [1], pos = -1', 'output': 'false', 'explanation': 'There is no cycle in the linked list.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:43",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Two Pointers"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:44",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Floyd's Tortoise and Hare Algorithm",
        "code": "class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *fast = head;\n        ListNode *slow = head;\n        \n        while(fast != NULL && fast -\u003E next != NULL)\n        {\n            fast = fast -\u003E next -\u003E next;\n            slow = slow -\u003E next;\n            \n            if(fast == slow)\n                return true;\n        }\n        \n        return false;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Math"
        ],
        "title": "Add Digits",
        "problem_statement": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.",
        "constraints": [
          "0 \u003C= num \u003C= 2^31 - 1"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'num = 38', 'output': '2', 'explanation': 'The process is\\n38 --\u003E 3 + 8 --\u003E 11\\n11 --\u003E 1 + 1 --\u003E 2 \\nSince 2 has only one digit, return it.'}",
          "{'id': 2, 'input': 'num = 0', 'output': '0', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:46",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Digital Root (Mathematical Property)",
        "code": "class Solution {\npublic:\n    int addDigits(int num) {\n        if(num == 0)\n            return 0;\n        else if(num % 9 == 0)\n            return 9;\n        else \n            return num % 9;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:47",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Digital Root (Mathematical Property)",
        "code": "class Solution:\n    def addDigits(self, num: int) -\u003E int:\n        if num == 0:\n            return 0\n        elif num % 9 == 0:\n            return 9\n        else:\n            return num % 9",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Math"
        ],
        "title": "Happy Number",
        "problem_statement": "Write an algorithm to determine if a number n is happy.\n\nA happy number is a number defined by the following process:\n- Starting with any positive integer, replace the number by the sum of the squares of its digits.\n- Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n- Those numbers for which this process ends in 1 are happy.\n\nReturn true if n is a happy number, and false if not.",
        "constraints": [
          "1 \u003C= n \u003C= 2^31 - 1"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'n = 19', 'output': 'true', 'explanation': '1^2 + 9^2 = 82\\n8^2 + 2^2 = 68\\n6^2 + 8^2 = 100\\n1^2 + 0^2 + 0^2 = 1'}",
          "{'id': 2, 'input': 'n = 2', 'output': 'false', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:49",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Hash Set Cycle Detection",
        "code": "class Solution {\npublic:\n    bool isHappy(int n) {\n        unordered_map\u003Cint, int\u003E mp;\n        while(n != 1)\n        {\n            if(mp[n] == 0)\n                mp[n]++;\n            else\n                return false;\n            \n            int sum = 0;\n            while(n != 0)\n            {\n                sum += pow(n%10, 2);\n                n /= 10;\n            }\n            n = sum;\n        }\n        return true;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:50",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Hardcoded Cycle Detection",
        "code": "class Solution:\n    def isHappy(self, n: int) -\u003E bool:\n        while n \u003E 4:\n            n = sum(int(d)**2 for d in str(n))\n        return n == 1",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:51",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Recursion"
        ],
        "title": "Fibonacci Number",
        "problem_statement": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n \u003E 1.\nGiven n, calculate F(n).",
        "constraints": [
          "0 \u003C= n \u003C= 30"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'n = 2', 'output': '1', 'explanation': 'F(2) = F(1) + F(0) = 1 + 0 = 1.'}",
          "{'id': 2, 'input': 'n = 3', 'output': '2', 'explanation': 'F(3) = F(2) + F(1) = 1 + 1 = 2.'}",
          "{'id': 3, 'input': 'n = 4', 'output': '3', 'explanation': 'F(4) = F(3) + F(2) = 2 + 1 = 3.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:52",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Recursion"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:53",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Simple Recursion",
        "code": "class Solution {\npublic:\n    int fib(int n) {\n        if(n == 0)\n        {\n            return 0;    \n        }\n        \n        else if(n == 1)\n        {\n            return 1;\n        }\n        \n        int sum = fib(n-1) + fib(n-2);\n        return sum;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:54",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Recursion"
        ],
        "title": "Number of Steps to Reduce a Number to Zero",
        "problem_statement": "Given an integer num, return the number of steps to reduce it to zero.\n\nIn one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.",
        "constraints": [
          "0 \u003C= num \u003C= 10^6"
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'num = 14', 'output': '6', 'explanation': 'Step 1) 14 is even; divide by 2 and obtain 7. \\nStep 2) 7 is odd; subtract 1 and obtain 6.\\nStep 3) 6 is even; divide by 2 and obtain 3. \\nStep 4) 3 is odd; subtract 1 and obtain 2. \\nStep 5) 2 is even; divide by 2 and obtain 1. \\nStep 6) 1 is odd; subtract 1 and obtain 0.'}",
          "{'id': 2, 'input': 'num = 8', 'output': '4', 'explanation': 'Step 1) 8 is even; divide by 2 and obtain 4. \\nStep 2) 4 is even; divide by 2 and obtain 2. \\nStep 3) 2 is even; divide by 2 and obtain 1. \\nStep 4) 1 is odd; subtract 1 and obtain 0.'}",
          "{'id': 3, 'input': 'num = 123', 'output': '12', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:55",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Iterative Simulation",
        "code": "class Solution {\npublic:\n    int numberOfSteps(int num) {\n        int c = 0;\n        while(num \u003E 0)\n        {\n            if(num % 2 == 0)\n            {\n                num /= 2;\n            }\n            else\n            {\n                num -= 1;\n            }\n            c++;\n        }\n        return c;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:56",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Recursion"
        ],
        "title": "Reverse String",
        "problem_statement": "Write a function that reverses a string. The input string is given as an array of characters s.\n\nYou must do this by modifying the input array in-place with O(1) extra memory.",
        "constraints": [
          "1 \u003C= s.length \u003C= 10^5",
          "s[i] is a printable ascii character."
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 's = [\"h\",\"e\",\"l\",\"l\",\"o\"]', 'output': '[\"o\",\"l\",\"l\",\"e\",\"h\"]', 'explanation': None}",
          "{'id': 2, 'input': 's = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]', 'output': '[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:57",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Two-Pointer Swap (In-place)",
        "code": "class Solution {\npublic:\n    void reverseString(vector\u003Cchar\u003E& s) {\n        int start = 0, end = s.size() - 1;\n        while(start \u003C end)\n        {\n            swap(s[start], s[end]);\n            start++;\n            end--;\n        }\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Array"
        ],
        "title": "Split Array into Consecutive Subsequences",
        "problem_statement": "You are given an integer array nums that is sorted in non-decreasing order.\n\nDetermine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:\n- Each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).\n- All subsequences have a length of 3 or more.\n\nReturn true if you can split nums according to the above conditions, or false otherwise.\n\nA subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).",
        "constraints": [
          "1 \u003C= nums.length \u003C= 10^4",
          "-1000 \u003C= nums[i] \u003C= 1000",
          "nums is sorted in non-decreasing order."
        ],
        "difficulty": "Medium",
        "examples": [
          "{'id': 1, 'input': 'nums = [1,2,3,3,4,5]', 'output': 'true', 'explanation': 'nums can be split into the following subsequences:\\n[1,2,3,3,4,5] --\u003E 1, 2, 3\\n[1,2,3,3,4,5] --\u003E 3, 4, 5'}",
          "{'id': 2, 'input': 'nums = [1,2,3,3,4,4,5,5]', 'output': 'true', 'explanation': 'nums can be split into the following subsequences:\\n[1,2,3,3,4,4,5,5] --\u003E 1, 2, 3, 4, 5\\n[1,2,3,3,4,4,5,5] --\u003E 3, 4, 5'}",
          "{'id': 3, 'input': 'nums = [1,2,3,4,4,5]', 'output': 'false', 'explanation': 'It is impossible to split nums into consecutive increasing subsequences of length 3 or more.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:59",
      "labels": [
        "Difficulty"
      ],
      "properties": {
        "level": "Medium"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:60",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Greedy with Hash Maps",
        "code": "class Solution {\npublic:\n    bool isPossible(vector\u003Cint\u003E& v) {\n        unordered_map\u003Cint, int\u003E mp1, mp2;\n        for(auto x: v)\n            mp1[x]++;\n        \n        for(auto x: v){\n            if(mp1[x] == 0)  continue;\n            mp1[x]--;\n            \n            if(mp2[x-1] \u003E 0){\n                mp2[x-1]--;\n                mp2[x]++;\n            }\n            else if(mp1[x+1] \u003E 0 and mp1[x+2] \u003E 0){\n                mp1[x+1]--;\n                mp1[x+2]--;\n                mp2[x+2]++;\n            }\n            else\n                return false;\n        }\n        return true;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:61",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Greedy with Hash Maps",
        "code": "class Solution:\n    def isPossible(self, v: List[int]) -\u003E bool:\n        mp1 = collections.Counter(v)\n        mp2 = collections.Counter()\n        \n        for x in v:\n            if not mp1[x]:  continue\n            mp1[x] -= 1\n            \n            if mp2[x-1] \u003E 0:\n                mp2[x-1] -= 1\n                mp2[x] += 1\n            elif mp1[x+1] and mp1[x+2]:\n                mp1[x+1] -= 1\n                mp1[x+2] -= 1\n                mp2[x+2] += 1\n            else:\n                return False\n        return True",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Array"
        ],
        "title": "Reduce Array Size to The Half",
        "problem_statement": "You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array.\n\nReturn the minimum size of the set so that at least half of the integers of the array are removed.",
        "constraints": [
          "2 \u003C= arr.length \u003C= 10^5",
          "arr.length is even.",
          "1 \u003C= arr[i] \u003C= 10^5"
        ],
        "difficulty": "Medium",
        "examples": [
          "{'id': 1, 'input': 'arr = [3,3,3,3,5,5,5,2,2,7]', 'output': '2', 'explanation': 'Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.'}",
          "{'id': 2, 'input': 'arr = [7,7,7,7,7,7]', 'output': '1', 'explanation': 'The only possible set you can choose is {7}. This will make the new array empty.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:63",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Greedy with Frequency Counting",
        "code": "class Solution {\npublic:\n    int minSetSize(vector\u003Cint\u003E& arr) {\n        int ans = 0, c = 0;\n        unordered_map\u003Cint, int\u003E mp;\n        for(auto x: arr)\n            mp[x]++;\n\n        vector\u003Cint\u003E v;\n        for(auto it: mp)\n            v.push_back(it.second);\n\n        sort(v.rbegin(), v.rend()); // Sort descending\n        for(int i = 0; i \u003C v.size(); i++){\n            ans += v[i];\n            c++;\n            if(ans \u003E= arr.size()/2)\n                return c;\n        }\n        return c;\n    }\n};",
        "language": "C++ (Sort)"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:64",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Greedy with Frequency Counting",
        "code": "class Solution {\npublic:\n    int minSetSize(vector\u003Cint\u003E& arr) {\n        int x = 0, ans = 0;\n        unordered_map\u003Cint, int\u003E mp;\n        for(auto i: arr)\n            mp[i]++;\n\n        priority_queue\u003Cint\u003E pq;\n        for(auto i: mp)\n            pq.push(i.second);\n\n        while(x \u003C arr.size()/2){\n            x += pq.top();\n            pq.pop();\n            ans++;\n        }\n        return ans;\n    }\n};",
        "language": "C++ (Priority Queue)"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:65",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Backtracking"
        ],
        "title": "Numbers With Same Consecutive Differences",
        "problem_statement": "Given two integers n and k, return an array of all the integers of length n where the difference between every two consecutive digits is k. You may return the answer in any order.\n\nNote that the integers should not have leading zeros. Integers as 02 and 043 are not allowed.",
        "constraints": [
          "2 \u003C= n \u003C= 9",
          "0 \u003C= k \u003C= 9"
        ],
        "difficulty": "Medium",
        "examples": [
          "{'id': 1, 'input': 'n = 3, k = 7', 'output': '[181,292,707,818,929]', 'explanation': 'Note that 070 is not a valid number, because it has leading zeroes.'}",
          "{'id': 2, 'input': 'n = 2, k = 1', 'output': '[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:66",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Backtracking"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:67",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Backtracking (DFS)",
        "code": "class Solution {\npublic:\n    vector\u003Cint\u003E ans;\n    void solve(int len, int &k, int num, int digit){\n        if(len == 0){\n            ans.push_back(num);\n            return;\n        }\n        int next_digit_add = digit + k;\n        int next_digit_sub = digit - k;\n\n        if(next_digit_add \u003E= 0 && next_digit_add \u003C 10){\n            solve(len-1, k, num*10 + next_digit_add, next_digit_add);\n        }\n\n        // Avoid double counting if k is 0\n        if(k != 0 && next_digit_sub \u003E= 0 && next_digit_sub \u003C 10){\n            solve(len-1, k, num*10 + next_digit_sub, next_digit_sub);\n        }\n    }\n    \n    vector\u003Cint\u003E numsSameConsecDiff(int n, int k) {\n        for(int i = 1; i \u003C= 9; i++)      \n            solve(n-1, k, i, i);\n        return ans;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:69",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Graph"
        ],
        "title": "Keys and Rooms",
        "problem_statement": "There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\n\nWhen you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\n\nGiven an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.",
        "constraints": [
          "n == rooms.length",
          "2 \u003C= n \u003C= 1000",
          "0 \u003C= rooms[i].length \u003C= 1000",
          "1 \u003C= sum(rooms[i].length) \u003C= 3000",
          "0 \u003C= rooms[i][j] \u003C n",
          "All the values of rooms[i] are unique."
        ],
        "difficulty": "Medium",
        "examples": [
          "{'id': 1, 'input': 'rooms = [[1],[2],[3],[]]', 'output': 'true', 'explanation': 'We visit room 0 and pick up key 1.\\nWe then visit room 1 and pick up key 2.\\nWe then visit room 2 and pick up key 3.\\nWe then visit room 3.\\nSince we were able to visit every room, we return true.'}",
          "{'id': 2, 'input': 'rooms = [[1,3],[3,0,1],[2],[0]]', 'output': 'false', 'explanation': 'We can not enter room number 2 since the only key that unlocks it is in that room.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:70",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Graph Traversal (BFS)",
        "code": "class Solution {\npublic:\n    bool canVisitAllRooms(vector\u003Cvector\u003Cint\u003E\u003E& rooms) {\n        int n = rooms.size();\n        vector\u003Cbool\u003E vis(n, false);\n        queue\u003Cint\u003E q;\n        q.push(0);\n        vis[0] = true;\n        \n        while(!q.empty()){\n            int room = q.front();\n            q.pop();\n            for(auto it: rooms[room]){\n                if(!vis[it]){\n                    q.push(it);\n                    vis[it] = true;\n                }\n            }\n        }\n        for(auto it: vis)\n            if(!it)\n                return false;\n        return true;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:73",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Sorting"
        ],
        "title": "Evaluate Reverse Polish Notation",
        "problem_statement": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\n\nEvaluate the expression. Return an integer that represents the value of the expression.\n\nNote that:\n- The valid operators are '+', '-', '*', and '/'.\n- Each operand may be an integer or another expression.\n- The division between two integers always truncates toward zero.\n- There will not be any division by zero.\n- The input represents a valid arithmetic expression in a reverse polish notation.\n- The answer and all the intermediate calculations can be represented in a 32-bit integer.",
        "constraints": [
          "1 \u003C= tokens.length \u003C= 10^4",
          "tokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200]."
        ],
        "difficulty": "Medium",
        "examples": [
          "{'id': 1, 'input': 'tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]', 'output': '9', 'explanation': '((2 + 1) * 3) = 9'}",
          "{'id': 2, 'input': 'tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]', 'output': '6', 'explanation': '(4 + (13 / 5)) = 6'}",
          "{'id': 3, 'input': 'tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]', 'output': '22', 'explanation': '((10 * (6 / ((9 + 3) * -11))) + 17) + 5\\n= ((10 * (6 / (12 * -11))) + 17) + 5\\n= ((10 * (6 / -132)) + 17) + 5\\n= ((10 * 0) + 17) + 5\\n= (0 + 17) + 5\\n= 17 + 5\\n= 22'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:74",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Sorting"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:75",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Stack-based Evaluation",
        "code": "class Solution {\npublic:\n    int evalRPN(vector\u003Cstring\u003E& tokens) {\n    stack\u003Clong long\u003E s;\n    for(auto& t : tokens){\n            if(t == \"+\" || t == \"-\" || t == \"*\" || t == \"/\") {\n            long long op1 = s.top(); s.pop();\n            long long op2 = s.top(); s.pop();\n            if(t == \"+\") op1 = op2 + op1; \n            if(t == \"-\") op1 = op2 - op1;\n            if(t == \"/\") op1 = op2 / op1;\n            if(t == \"*\") op1 = op2 * op1;   \n                s.push(op1);\n        }\n            else \n                s.push(stoll(t));      \n        }\n    return s.top(); \n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:76",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Segment Tree"
        ],
        "title": "My Calendar III",
        "problem_statement": "A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)\n\nYou are given some events [startTime, endTime), after each given event, return an integer k representing the maximum k-booking between all the previous events.\n\nImplement the MyCalendarThree class:\n- MyCalendarThree() Initializes the object.\n- int book(int startTime, int endTime) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.",
        "constraints": [
          "0 \u003C= startTime \u003C endTime \u003C= 10^9",
          "At most 400 calls will be made to book."
        ],
        "difficulty": "Hard",
        "examples": [
          "{'id': 1, 'input': '[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]', 'output': '[null, 1, 1, 2, 3, 3, 3]', 'explanation': 'MyCalendarThree myCalendarThree = new MyCalendarThree();\\nmyCalendarThree.book(10, 20); // return 1\\nmyCalendarThree.book(50, 60); // return 1\\nmyCalendarThree.book(10, 40); // return 2\\nmyCalendarThree.book(5, 15); // return 3\\nmyCalendarThree.book(5, 10); // return 3\\nmyCalendarThree.book(25, 55); // return 3'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:77",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Segment Tree"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:78",
      "labels": [
        "Difficulty"
      ],
      "properties": {
        "level": "Hard"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:79",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Boundary Counting (Line Sweep)",
        "code": "class MyCalendarThree {\npublic:\n    map\u003Cint, int\u003E timeline;      \n    MyCalendarThree() {\n        \n    }\n    \n    int book(int s, int e) {\n        timeline[s]++;\n        timeline[e]--;\n        int ongoing = 0, k = 0;\n        for(pair\u003Cint, int\u003E t: timeline)\n            k = max(k, ongoing += t.second);\n        return k;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:80",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Boundary Counting (Line Sweep)",
        "code": "from itertools import accumulate\nfrom sortedcontainers import SortedDict\n\nclass MyCalendarThree:\n\n    def __init__(self):\n        self.timeline = SortedDict()\n\n    def book(self, start: int, end: int) -\u003E int:\n        self.timeline[start] = self.timeline.get(start, 0) + 1\n        self.timeline[end] = self.timeline.get(end, 0) - 1\n        return max(accumulate(self.timeline.values()))",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Dynamic Programming"
        ],
        "title": "Best Time to Buy and Sell Stock IV",
        "problem_statement": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\n\nFind the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
        "constraints": [
          "1 \u003C= k \u003C= 100",
          "1 \u003C= prices.length \u003C= 1000",
          "0 \u003C= prices[i] \u003C= 1000"
        ],
        "difficulty": "Hard",
        "examples": [
          "{'id': 1, 'input': 'k = 2, prices = [2,4,1]', 'output': '2', 'explanation': 'Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.'}",
          "{'id': 2, 'input': 'k = 2, prices = [3,2,6,5,0,3]', 'output': '7', 'explanation': 'Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:82",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming",
        "code": "class Solution {\npublic:\n    int maxProfit(int k, vector\u003Cint\u003E& prices) {\n        if(k == 0)  return 0;\n        vector\u003Cvector\u003Cint\u003E\u003E dp(k+1, vector\u003Cint\u003E(2));\n        \n        for(int i = 0; i \u003C= k; i++){\n            dp[i][0] = INT_MAX; // cost to buy\n            dp[i][1] = 0;       // profit to sell\n        }\n        \n        for(auto &p: prices){\n            for(int i = 1; i \u003C= k; i++){\n                dp[i][0] = min(dp[i][0], p - dp[i-1][1]);\n                dp[i][1] = max(dp[i][1], p - dp[i][0]);\n            }\n        }\n        return dp[k][1];\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:83",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Dynamic Programming",
        "code": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -\u003E int:\n        if k == 0: return 0\n        # dp[i][0] = cost to buy, dp[i][1] = profit to sell for transaction i\n        dp = [[float('inf'), 0] for _ in range(k + 1)]\n              \n        for p in prices:\n            for i in range(1, k + 1):\n                dp[i][0] = min(dp[i][0], p - dp[i-1][1])\n                dp[i][1] = max(dp[i][1], p - dp[i][0])\n        \n        return dp[k][1]",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Dynamic Programming"
        ],
        "title": "K Inverse Pairs Array",
        "problem_statement": "For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 \u003C= i \u003C j \u003C nums.length and nums[i] \u003E nums[j].\n\nGiven two integers n and k, return the number of different arrays consisting of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 10^9 + 7.",
        "constraints": [
          "1 \u003C= n \u003C= 1000",
          "0 \u003C= k \u003C= 1000"
        ],
        "difficulty": "Hard",
        "examples": [
          "{'id': 1, 'input': 'n = 3, k = 0', 'output': '1', 'explanation': 'Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.'}",
          "{'id': 2, 'input': 'n = 3, k = 1', 'output': '2', 'explanation': 'The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:85",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Optimized Dynamic Programming",
        "code": "class Solution {\npublic:\n    int kInversePairs(int n, int k) {\n        int dp[2][1001] = {};\n        dp[0][0] = 1;\n        int mod = 1e9 + 7;\n        for(int i = 1; i \u003C= n; i++) {\n            int current = i % 2;\n            int prev = (i - 1) % 2;\n            dp[current][0] = 1;\n            for(int j = 1; j \u003C= k; j++) {\n                dp[current][j] = (dp[prev][j] + dp[current][j-1]) % mod;\n                if(j \u003E= i) {\n                    dp[current][j] = (dp[current][j] - dp[prev][j-i] + mod) % mod;\n                }\n            }\n        }\n        return dp[n%2][k];\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Linked List"
        ],
        "title": "Merge k Sorted Lists",
        "problem_statement": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.",
        "constraints": [
          "k == lists.length",
          "0 \u003C= k \u003C= 10^4",
          "0 \u003C= lists[i].length \u003C= 500",
          "-10^4 \u003C= lists[i][j] \u003C= 10^4",
          "lists[i] is sorted in ascending order.",
          "The sum of lists[i].length will not exceed 10^4."
        ],
        "difficulty": "Hard",
        "examples": [
          "{'id': 1, 'input': 'lists = [[1,4,5],[1,3,4],[2,6]]', 'output': '[1,1,2,3,4,4,5,6]', 'explanation': 'The linked-lists are:\\n[\\n  1-\u003E4-\u003E5,\\n  1-\u003E3-\u003E4,\\n  2-\u003E6\\n]\\nmerging them into one sorted linked list:\\n1-\u003E1-\u003E2-\u003E3-\u003E4-\u003E4-\u003E5-\u003E6'}",
          "{'id': 2, 'input': 'lists = []', 'output': '[]', 'explanation': None}",
          "{'id': 3, 'input': 'lists = [[]]', 'output': '[]', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:87",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Divide and Conquer (Merge in Pairs)",
        "code": "class Solution {\npublic:\n    ListNode *mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (NULL == l1) return l2;\n        else if (NULL == l2) return l1;\n        \n        if (l1-\u003Eval \u003C= l2-\u003Eval) {\n            l1-\u003Enext = mergeTwoLists(l1-\u003Enext, l2);\n            return l1;\n        }\n        \n        else {\n            l2-\u003Enext = mergeTwoLists(l1, l2-\u003Enext);\n            return l2;\n        }\n    }\n    \n    ListNode *mergeKLists(vector\u003CListNode *\u003E &lists) {\n        if (lists.empty()) return NULL;\n        int len = lists.size();\n        \n        while (len \u003E 1) {\n            for (int i = 0; i \u003C len / 2; ++i) {\n                lists[i] = mergeTwoLists(lists[i], lists[len - 1 - i]);\n            }\n            \n            len = (len + 1) / 2;\n        }\n        \n        return lists.front();\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:88",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "String"
        ],
        "title": "Minimum Window Substring",
        "problem_statement": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n\nThe testcases will be generated such that the answer is unique.",
        "constraints": [
          "m == s.length",
          "n == t.length",
          "1 \u003C= m, n \u003C= 10^5",
          "s and t consist of uppercase and lowercase English letters."
        ],
        "difficulty": "Hard",
        "examples": [
          "{'id': 1, 'input': 's = \"ADOBECODEBANC\", t = \"ABC\"', 'output': '\"BANC\"', 'explanation': 'The minimum window substring \"BANC\" includes \\'A\\', \\'B\\', and \\'C\\' from string t.'}",
          "{'id': 2, 'input': 's = \"a\", t = \"a\"', 'output': '\"a\"', 'explanation': 'The entire string s is the minimum window.'}",
          "{'id': 3, 'input': 's = \"a\", t = \"aa\"', 'output': '\"\"', 'explanation': \"Both 'a's from t must be included in the window.\\nSince the largest window of s only has one 'a', return empty string.\"}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:89",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Sliding Window",
        "code": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n        vector\u003Cint\u003E mp(128, 0);\n        for(auto c: t){\n            mp[c]++;\n        }\n        int low = 0, high = 0, m = s.size(), n = t.size(), minStart = 0, minLen = INT_MAX;\n        \n        while(high \u003C m){\n            if(mp[s[high]] \u003E 0)\n                n--;\n            mp[s[high]]--;\n            high++;\n            \n            while(n == 0){\n                if(high - low \u003C minLen){\n                    minStart = low;\n                    minLen = high - low;\n                }\n                mp[s[low]]++;\n                if(mp[s[low]] \u003E 0)\n                    n++;\n                low++;\n            }\n        }\n        if(minLen != INT_MAX)\n            return s.substr(minStart, minLen);\n        return \"\";\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:90",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Stack and Queue"
        ],
        "title": "Longest Valid Parentheses",
        "problem_statement": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.",
        "constraints": [
          "0 \u003C= s.length \u003C= 3 * 10^4",
          "s[i] is '(', or ')'."
        ],
        "difficulty": "Hard",
        "examples": [
          "{'id': 1, 'input': 's = \"(()\"', 'output': '2', 'explanation': 'The longest valid parentheses substring is \"()\".'}",
          "{'id': 2, 'input': 's = \")()())\"', 'output': '4', 'explanation': 'The longest valid parentheses substring is \"()()\".'}",
          "{'id': 3, 'input': 's = \"\"', 'output': '0', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:91",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Stack and Queue"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:92",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Stack with Index Tracking",
        "code": "class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        stack\u003Cint\u003E st;\n        st.push(-1);\n        int ans = 0;\n        \n        for(int i = 0; i \u003C s.size(); i++){\n            if(s[i] == '('){\n                st.push(i);\n            }\n            else {\n                st.pop();\n                if (st.empty()) {\n                    st.push(i);\n                }\n                else {\n                    ans = max(ans, i - st.top());\n                }\n            }\n        }\n        return ans;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:93",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Stack with Index Tracking",
        "code": "class Solution:\n    def longestValidParentheses(self, s: str) -\u003E int:\n        st = [-1]\n        ans = 0\n        \n        for i, char in enumerate(s):\n            if char == '(':\n                st.append(i)\n            else:\n                st.pop()\n                if not st:\n                    st.append(i)\n                else:\n                    ans = max(ans, i - st[-1])\n        \n        return ans",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Math"
        ],
        "title": "Poor Pigs",
        "problem_statement": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\n\nYou can feed the pigs according to these steps:\n1. Choose some live pigs to feed.\n2. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n3. Wait for minutesToDie minutes. You may not feed any other pigs during this time.\n4. After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n5. Repeat this process until you run out of time.\n\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.",
        "constraints": [
          "1 \u003C= buckets \u003C= 1000",
          "1 \u003C= minutesToDie \u003C= minutesToTest \u003C= 100"
        ],
        "difficulty": "Hard",
        "examples": [
          "{'id': 1, 'input': 'buckets = 4, minutesToDie = 15, minutesToTest = 15', 'output': '2', 'explanation': 'We can determine the poisonous bucket as follows:\\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\\nAt time 15, there are 4 possible outcomes:\\n- If only the first pig dies, then bucket 1 must be poisonous.\\n- If only the second pig dies, then bucket 3 must be poisonous.\\n- If both pigs die, then bucket 2 must be poisonous.\\n- If neither pig dies, then bucket 4 must be poisonous.'}",
          "{'id': 2, 'input': 'buckets = 4, minutesToDie = 15, minutesToTest = 30', 'output': '2', 'explanation': 'We can determine the poisonous bucket as follows:\\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\\nAt time 15, there are 2 possible outcomes:\\n- If either pig dies, then the poisonous bucket is the one it was fed.\\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:95",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Mathematical (Combinatorics)",
        "code": "#include \u003Ccmath\u003E\n\nclass Solution {\npublic:\n    int poorPigs(int b, int m1, int m2) {\n        return ceil(log(b)/log(m2/m1 +1));\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:96",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Mathematical (Combinatorics)",
        "code": "from math import log, ceil\n\nclass Solution:\n    def poorPigs(self, b: int, m1: int, m2: int) -\u003E int:\n        return ceil(log(b)/log(m2/m1 +1))",
        "language": "Python"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Array",
          "Hash Table",
          "String"
        ],
        "title": "Check if the Sentence Is Pangram",
        "problem_statement": "A pangram is a sentence where every letter of the English alphabet appears at least once. Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.",
        "constraints": [
          "1 \u003C= sentence.length \u003C= 1000",
          "sentence consists of lowercase English letters."
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'sentence = \"thequickbrownfoxjumpsoverthelazydog\"', 'output': 'true', 'explanation': 'sentence contains at least one of every letter of the English alphabet.'}",
          "{'id': 2, 'input': 'sentence = \"leetcode\"', 'output': 'false', 'explanation': None}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Array"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:107",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "Hash Table"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:108",
      "labels": [
        "Topic"
      ],
      "properties": {
        "name": "String"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "labels": [
        "Difficulty"
      ],
      "properties": {
        "level": "Easy"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:110",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Standard",
        "code": "class Solution {\npublic:\n    bool checkIfPangram(string str) {\n        int n = str.size();\n        vector\u003Cint\u003E v(26,0);\n        \n        for(int i = 0; i \u003C n; i++)\n        {\n            v[str[i]-'a']++;\n        }\n        \n        for(int i = 0; i \u003C v.size(); i++)\n        {\n            if(v[i] == 0)\n                return false;\n        }\n    return true;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:111",
      "labels": [
        "TimeComplexity"
      ],
      "properties": {
        "complexity": "$O(n)$",
        "explanation": "The time complexity is $O(n)$ where 'n' is the length of the input string, because we iterate through the string once to count the characters. The space complexity is $O(1)$ because the vector used for counting has a fixed size of 26, which is constant and does not depend on the input string size."
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:112",
      "labels": [
        "SpaceComplexity"
      ],
      "properties": {
        "complexity": "$O(1)$",
        "explanation": "The time complexity is $O(n)$ where 'n' is the length of the input string, because we iterate through the string once to count the characters. The space complexity is $O(1)$ because the vector used for counting has a fixed size of 26, which is constant and does not depend on the input string size."
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "labels": [
        "Problem"
      ],
      "properties": {
        "topics": [
          "Array",
          "String"
        ],
        "title": "Count Items Matching a Rule",
        "problem_statement": "You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.\n\nThe ith item is said to match the rule if one of the following is true:\n- ruleKey == \"type\" and ruleValue == typei.\n- ruleKey == \"color\" and ruleValue == colori.\n- ruleKey == \"name\" and ruleValue == namei.\n\nReturn the number of items that match the given rule.",
        "constraints": [
          "1 \u003C= items.length \u003C= 10^4",
          "1 \u003C= typei.length, colori.length, namei.length, ruleValue.length \u003C= 10",
          "ruleKey is equal to either \"type\", \"color\", or \"name\".",
          "All strings consist only of lowercase letters."
        ],
        "difficulty": "Easy",
        "examples": [
          "{'id': 1, 'input': 'items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"', 'output': '1', 'explanation': 'There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"].'}",
          "{'id': 2, 'input': 'items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"', 'output': '2', 'explanation': 'There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match.'}"
        ]
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:114",
      "labels": [
        "Solution"
      ],
      "properties": {
        "approach": "Standard",
        "code": "class Solution {\npublic:\n    int countMatches(vector\u003Cvector\u003Cstring\u003E\u003E& items, string ruleKey, string ruleValue) {\n        int n = items.size();\n        int x, c = 0;\n        \n        if(ruleKey == \"type\") x = 0;\n        if(ruleKey == \"color\") x = 1;\n        if(ruleKey == \"name\") x = 2;\n        \n        for(int i = 0; i \u003C n; i++)\n        {\n            if(items[i][x] == ruleValue)\n                c++;\n        }\n        \n        return c;\n    }\n};",
        "language": "C++"
      }
    },
    {
      "id": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:115",
      "labels": [
        "TimeComplexity"
      ],
      "properties": {
        "complexity": "$O(n)$",
        "explanation": "The time complexity is $O(n)$, where 'n' is the total number of items in the list. This is because we need to iterate through each item once to check if it matches the rule. The space complexity is $O(1)$ as we only use a few variables to store the count and index, which does not scale with the size of the input."
      }
    }
  ],
  "relationships": [
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532225",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:2",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606846977",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474753",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102529",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:3",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152924803141730305",
      "type": "HAS_TIME_COMPLEXITY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:4",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152925902653358081",
      "type": "HAS_SPACE_COMPLEXITY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:5",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6919786325012905990",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6922038124826591255",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6933297123895017500",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6926541724453961786",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6928793524267647038",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6931045324081332329",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6933297123895017585",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606846982",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:7",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157425104234217478",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:8",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532230",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474758",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102534",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:9",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787782",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:10",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152924803141730310",
      "type": "HAS_TIME_COMPLEXITY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:11",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152925902653358086",
      "type": "HAS_SPACE_COMPLEXITY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:12",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985862",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6919786325012905997",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6919786325012906004",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "properties": {
        "shared_topic": "Bit Manipulation"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356358",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041606",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6922038124826591269",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Bit Manipulation"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6928793524267647013",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6924289924640276525",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6926541724453961776",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726854",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412102",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6928793524267647070",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1166437801047097350",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1168689600860782598",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532237",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:8",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606846989",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:14",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157425104234217485",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:15",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474765",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102541",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:16",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787789",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:17",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157427303257473037",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:18",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159679103071158285",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:19",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985869",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1175445000301838349",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1177696800115523597",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1179948599929208845",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356365",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041613",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726861",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1182200399742894093",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1184452199556579341",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412109",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532244",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:7",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606846996",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:14",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474772",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102548",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:21",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787796",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:22",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985876",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Bit Manipulation"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041620",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1170941400674467860",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1173193200488153108",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356372",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Bit Manipulation"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1175445000301838356",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1177696800115523604",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606846999",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:14",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532247",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474775",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102551",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:24",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787799",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:25",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157427303257473047",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:26",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159679103071158295",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:27",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985879",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671127",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6931045324081332237",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6926541724453961748",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041623",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6919786325012906012",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726871",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412119",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6922038124826591313",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6924289924640276564",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1166437801047097367",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1168689600860782615",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532252",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:14",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847004",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474780",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102556",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:29",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787804",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:30",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726876",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412124",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6933297123895017485",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6928793524267646996",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985884",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1166437801047097372",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1170941400674467868",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1173193200488153116",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356380",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041628",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1175445000301838364",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1177696800115523612",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847007",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:32",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532255",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:33",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157425104234217503",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:34",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159676904047902751",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:35",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474783",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102559",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:36",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6919786325012906053",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:69",
      "properties": {
        "shared_topic": "Graph"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532261",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:7",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157425104234217509",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:8",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847013",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:38",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474789",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102565",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:39",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985893",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Bit Manipulation"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041637",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726885",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671141",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "properties": {
        "shared_topic": "Bit Manipulation"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1179948599929208869",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1182200399742894117",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1166437801047097381",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1168689600860782629",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1184452199556579365",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1170941400674467877",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847016",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:38",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474792",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102568",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:41",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6937800723522388005",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6919786325012906026",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6922038124826591318",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847018",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:38",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532266",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:43",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157425104234217514",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:107",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474794",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102570",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:44",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6940052523336073253",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985898",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356394",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041642",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "Hash Table"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847021",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:8",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474797",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102573",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:46",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787821",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:47",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985901",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671149",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356397",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726893",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412141",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847024",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:8",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474800",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102576",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:49",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787824",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:50",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985904",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671152",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356400",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041648",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412144",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847027",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:51",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:52",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474803",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:51",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102579",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:51",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:53",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6919786325012906038",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:51",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:54",
      "properties": {
        "shared_topic": "Recursion"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6922038124826591288",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:51",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:56",
      "properties": {
        "shared_topic": "Recursion"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847030",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:54",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:52",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474806",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:54",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102582",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:54",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:55",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985910",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:54",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:51",
      "properties": {
        "shared_topic": "Recursion"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356406",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:54",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:56",
      "properties": {
        "shared_topic": "Recursion"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847032",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:56",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:52",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474808",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:56",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102584",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:56",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:57",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985912",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:56",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:51",
      "properties": {
        "shared_topic": "Recursion"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671160",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:56",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:54",
      "properties": {
        "shared_topic": "Recursion"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847034",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474810",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:59",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102586",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:60",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787834",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:61",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985914",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671162",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356410",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041658",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412154",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1166437801047097402",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1168689600860782650",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847038",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474814",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:59",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102590",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:63",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787838",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:64",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985918",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671166",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356414",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041662",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726910",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1166437801047097406",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1168689600860782654",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847041",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:65",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:66",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474817",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:65",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:59",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102593",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:65",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:67",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847045",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:69",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:32",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474821",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:69",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:59",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102597",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:69",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:70",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985925",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:69",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:31",
      "properties": {
        "shared_topic": "Graph"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847049",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:73",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:74",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474825",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:73",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:59",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102601",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:73",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:75",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847052",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:76",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:77",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474828",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:76",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:78",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102604",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:76",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:79",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787852",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:76",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:80",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847057",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:14",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474833",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:78",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102609",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:82",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787857",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:83",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6935548923708702733",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6931045324081332244",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985937",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671185",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041681",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847060",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:14",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474836",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:78",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102612",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:85",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6937800723522387981",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6933297123895017492",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:20",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985940",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671188",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356436",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:84",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:81",
      "properties": {
        "shared_topic": "Dynamic Programming"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847062",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:38",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474838",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:78",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102614",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:87",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6942304323149758501",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985942",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:40",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671190",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:86",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "properties": {
        "shared_topic": "Linked List"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847064",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:88",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:108",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474840",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:88",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:78",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102616",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:88",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:89",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6940052523336073321",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:88",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "String"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:6940052523336073329",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:88",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "String"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847066",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:90",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:91",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474842",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:90",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:78",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102618",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:90",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:92",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787866",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:90",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:93",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847070",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:8",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474846",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:78",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102622",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:95",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155175503443787870",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:96",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985950",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671198",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:13",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356446",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:37",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041694",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:45",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726942",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:94",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:48",
      "properties": {
        "shared_topic": "Math"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847081",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532329",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:107",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157425104234217577",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:108",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474857",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102633",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:110",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152924803141730409",
      "type": "HAS_TIME_COMPLEXITY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:111",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152925902653358185",
      "type": "HAS_SPACE_COMPLEXITY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:112",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985961",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671209",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356457",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041705",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1170941400674467945",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:42",
      "properties": {
        "shared_topic": "Hash Table"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726953",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412201",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1173193200488153193",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:88",
      "properties": {
        "shared_topic": "String"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1168689600860782697",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1177696800115523689",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "properties": {
        "shared_topic": "String"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152921504606847089",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:106",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155173304420532337",
      "type": "BELONGS_TO_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:108",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152922604118474865",
      "type": "HAS_DIFFICULTY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:109",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152923703630102641",
      "type": "HAS_SOLUTION",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:114",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152924803141730417",
      "type": "HAS_TIME_COMPLEXITY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:115",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152925902653358193",
      "type": "HAS_SPACE_COMPLEXITY",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:0",
      "properties": {

      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1152927002164985969",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:1",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1155178801978671217",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:6",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1157430601792356465",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:23",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1159682401606041713",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:28",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1161934201419726961",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:58",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1164186001233412209",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:62",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1170941400674467953",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:88",
      "properties": {
        "shared_topic": "String"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1166437801047097457",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "Array"
      }
    },
    {
      "id": "5:f0bfedf6-2494-401c-ab4d-583d28d2477e:1173193200488153201",
      "type": "SIMILAR_TOPIC",
      "start": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:113",
      "end": "4:f0bfedf6-2494-401c-ab4d-583d28d2477e:105",
      "properties": {
        "shared_topic": "String"
      }
    }
  ]
}